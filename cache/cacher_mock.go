// Code generated by MockGen. DO NOT EDIT.
// Source: cacher.go

// Package cache is a generated GoMock package.
package cache

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockHCacher is a mock of HCacher interface.
type MockHCacher struct {
	ctrl     *gomock.Controller
	recorder *MockHCacherMockRecorder
}

// MockHCacherMockRecorder is the mock recorder for MockHCacher.
type MockHCacherMockRecorder struct {
	mock *MockHCacher
}

// NewMockHCacher creates a new mock instance.
func NewMockHCacher(ctrl *gomock.Controller) *MockHCacher {
	mock := &MockHCacher{ctrl: ctrl}
	mock.recorder = &MockHCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHCacher) EXPECT() *MockHCacherMockRecorder {
	return m.recorder
}

// HDel mocks base method.
func (m *MockHCacher) HDel(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HDel", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// HDel indicates an expected call of HDel.
func (mr *MockHCacherMockRecorder) HDel(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HDel", reflect.TypeOf((*MockHCacher)(nil).HDel), ctx, key)
}

// HMDel mocks base method.
func (m *MockHCacher) HMDel(ctx context.Context, key string, fields ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HMDel", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// HMDel indicates an expected call of HMDel.
func (mr *MockHCacherMockRecorder) HMDel(ctx, key interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMDel", reflect.TypeOf((*MockHCacher)(nil).HMDel), varargs...)
}

// HMGet mocks base method.
func (m *MockHCacher) HMGet(ctx context.Context, key string, fields ...string) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HMGet", varargs...)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HMGet indicates an expected call of HMGet.
func (mr *MockHCacherMockRecorder) HMGet(ctx, key interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMGet", reflect.TypeOf((*MockHCacher)(nil).HMGet), varargs...)
}

// HMSet mocks base method.
func (m *MockHCacher) HMSet(ctx context.Context, key string, ttl time.Duration, kvs ...*KV) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key, ttl}
	for _, a := range kvs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HMSet", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// HMSet indicates an expected call of HMSet.
func (mr *MockHCacherMockRecorder) HMSet(ctx, key, ttl interface{}, kvs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key, ttl}, kvs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMSet", reflect.TypeOf((*MockHCacher)(nil).HMSet), varargs...)
}

// MockCacher is a mock of Cacher interface.
type MockCacher struct {
	ctrl     *gomock.Controller
	recorder *MockCacherMockRecorder
}

// MockCacherMockRecorder is the mock recorder for MockCacher.
type MockCacherMockRecorder struct {
	mock *MockCacher
}

// NewMockCacher creates a new mock instance.
func NewMockCacher(ctrl *gomock.Controller) *MockCacher {
	mock := &MockCacher{ctrl: ctrl}
	mock.recorder = &MockCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacher) EXPECT() *MockCacherMockRecorder {
	return m.recorder
}

// MDel mocks base method.
func (m *MockCacher) MDel(ctx context.Context, keys ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MDel", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// MDel indicates an expected call of MDel.
func (mr *MockCacherMockRecorder) MDel(ctx interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MDel", reflect.TypeOf((*MockCacher)(nil).MDel), varargs...)
}

// MGet mocks base method.
func (m *MockCacher) MGet(ctx context.Context, keys ...string) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGet", varargs...)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGet indicates an expected call of MGet.
func (mr *MockCacherMockRecorder) MGet(ctx interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockCacher)(nil).MGet), varargs...)
}

// MSet mocks base method.
func (m *MockCacher) MSet(ctx context.Context, ttl time.Duration, kvs ...*KV) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, ttl}
	for _, a := range kvs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MSet", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// MSet indicates an expected call of MSet.
func (mr *MockCacherMockRecorder) MSet(ctx, ttl interface{}, kvs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, ttl}, kvs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSet", reflect.TypeOf((*MockCacher)(nil).MSet), varargs...)
}
